local Player = game:GetService("Players"),
local Mouse = game:GetService("Players").LocalPlayer,
local Client = game:GetService("Players").LocalPlayer:GetMouse(),
local RunService = game:GetService("RunService"),
local Cam = game.Workspace.CurrentCamera
local UserInputService = game.GetService("UserInputService")

local FOV = Drawing.new("Circle")
FOV.Color = Color3.new(1,1,1)
FOV.Thickness = 1
FOV.Filled = false

local UpdFOV = function()
if (not FOV) then
    return FOV
end
FOV.Visible = getgenv().RadiumSettings.FOV["Visible"]
FOV.Radius = getgenv().RadiumSettings.FOV["Radius"] 



local function GetClosestPlayer()
	local closest = FOV.Radius
	local Target = nil

	for _, v in next, Players:GetPlayers() do
		if v.Name ~= Mouse.Name then
			if getgenv().RadiumSettings.Checks.TeamCheck == true then
				if v.Team ~= Mouse.Team then
					if v.Character ~= nil then
						if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
							if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
								local ScreenPoint = Cam:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
								local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
								
								if VectorDistance < MaximumDistance then
									Target = v
								end
							end
						end
					end
				end
			else
				if v.Character ~= nil then
					if v.Character:FindFirstChild("HumanoidRootPart") ~= nil then
						if v.Character:FindFirstChild("Humanoid") ~= nil and v.Character:FindFirstChild("Humanoid").Health ~= 0 then
							local ScreenPoint = Cam:WorldToScreenPoint(v.Character:WaitForChild("HumanoidRootPart", math.huge).Position)
							local VectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPoint.X, ScreenPoint.Y)).Magnitude
							
							if VectorDistance < MaximumDistance then
								Target = v
							end
						end
					end
				end
			end
		end
	end

	return Target
end


local WTS = function (Object)
local ObjectVector = Cam:WorldToScreenPoint(Object.Position)
return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local IsOnScreen = function (Object)
local IsOnScreen = Cam:WorldToScreenPoint(Object.Position)
return IsOnScreen
end

local FOBJ = function (Object)
if string.find(object.name, "Gun") then
    return true
end
end


local ClosestPart = function (character)
local ClosestDistance, BodyPart = nil, 1/0
if (character and character:GetChildren()) then
    for _, x in next, character:GetChildren() do 
        if FOBJ(x) and IsOnScreen(x) then
            local dist = (WTS(x) - vector2.new(Mouse.X, Mouse.Y)).Magnitude
            if (FOV.Radius > dist and dist < ClosestDistance) then
                ClosestDistance = dist
                bodypart = x
            end
        end
    end 
end
return bodypart
end

local lol

task.spawn(function ()
while task.wait() do 
    if lol then 
        if getgenv().RadiumSettings.SilentAim.Enabled and getgenv().RadiumSettings.silentAim.ClosestPart == true then
            getgenv().RadiumSettings.SilentAim["part"] = tostring(ClosestPart(lol.Character))
              return (tostring(v) == "Hit" and endpoint)
             end
          end
      return backupindex(self, v)
    end)

	local grmt = getrawmetatable(game)
local backupindex = grmt.__index
setreadonly(grmt, false)

grmt.__index = newcclosure(function(self, v)
if (getgenv().RadiumSettings.SilentAim.Enabled and LocalPlr and tostring(v) == "Hit") then

    lol = ClosestPlrFromMouse()

    if lol then
        local endpoint = game.Players[tostring(lol)].Character[getgenv().RadiumSettings.SilentAim["Part"]].CFrame + (
            game.Players[tostring(lol)].Character[getgenv().RadiumSettings.SilentAim["Part"]].Velocity * getgenv().RadiumSettings.SilentAim.Prediction
        )
        return (tostring(v) == "Hit" and endpoint)
    end
end
return backupindex(self, v)
end)
    
    Mouse.KeyDown:Connect(function(Key)
    local Keybind = getgenv().RadiumSettings.AimAssist.Key:lower()
    if (Key == Keybind) then
        if getgenv().RadiumSettings.AimAssist.Enabled == true then
            IsTargetting = not IsTargetting
            if IsTargetting then
                Player = GetClosestPlayer()
            else
                if Player ~= nil then
                    Player = nil
                end
            end
        end
    end
end)
    


Mouse.KeyDown:Connect(
	 function(Key)
            if Key == getgenv().MacroKey then
                Macro = not Macro
                if Macro == true then
                    repeat
                        game:GetService("RunService").Heartbeat:wait()
                        keypress(0x49)
                        game:GetService("RunService").Heartbeat:wait()
                        keypress(0x4F)
                        game:GetService("RunService").Heartbeat:wait()
                        keyrelease(0x49)
                        game:GetService("RunService").Heartbeat:wait()
                        keyrelease(0x4F)
                        game:GetService("RunService").Heartbeat:wait()
                    until Macro == false
                end
            end
        end
    end)

	function GetClosest()
    local closestPlayer
    local shortestDistance = math.huge
    for i, v in pairs(game.Players:GetPlayers()) do
        pcall(function()

            if v ~= game.Players.LocalPlayer and v.Character and
                v.Character:FindFirstChild("Humanoid") then
                local pos = Cam:WorldToViewportPoint(v.Character.PrimaryPart.Position)
                local magnitude =
                (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude
                if (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).magnitude < shortestDistance then
                    closestPlayer = v
                    shortestDistance = magnitude
                end
            end
        end)
    end
    return closestPlayer
end

local function IsOnScreen(Object)
    local IsOnScreen = game.Workspace.CurrentCamera:WorldToScreenPoint(Object.Position)
    return IsOnScreen
end

local function Filter(Object)
    if string.find(Object.Name, "Gun") then
        return
    end
    if Object:IsA("Part") or Object:IsA("MeshPart") then
        return true
    end
end

local function WTSPos(Position)
    local ObjectVector = game.Workspace.CurrentCamera:WorldToScreenPoint(Position)
    return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

local function WTS(Object)
    local ObjectVector = game.Workspace.CurrentCamera:WorldToScreenPoint(Object.Position)
    return Vector2.new(ObjectVector.X, ObjectVector.Y)
end

function GetNearestPartToCursorOnCharacter(character)
    local ClosestDistance = math.huge
    local BodyPart = nil

    if (character and character:GetChildren()) then
        for k,  x in next, character:GetChildren() do
            if Filter(x) and IsOnScreen(x) then
                local Distance = (WTS(x) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
    
                if Distance < ClosestDistance then
                    ClosestDistance = Distance, BodyPart = X
                end
            end
        end
    end

    return BodyPart
end

game.RunService.Heartbeat:Connect(function()
    if getgenv().RadiumSettings.AimAssist.Enabled == true and Plr and Plr.Character ~= nil then
        if getgenv().RadiumSettings.Checks.UnlockedOnDeath then
            if Plr.Character.BodyEffects["K.O"].Value then Plr = nil end
        end
    if getgenv().RadiumSettings.AimAssist.Enabled == true and Plr and Plr.Character ~= nil then
        if getgenv().RadiumSettings.Checks.GrabbedCheck then
            if Plr.Character.BodyEffects["Grabbed"].Value then Plr = nil end
        end 
        if getgenv().RadiumSettings.AimAssist.Shake then
            local Main = CFrame.new(Cam.CFrame.p,Plr.Character[getgenv().RadiumSettings.AimAssist.Part].Position + Plr.Character[getgenv().RadiumSettings.AimAssist.Part].Velocity * getgenv().RadiumSettings.AimAssist.Prediction +
            Vector3.new(
                math.random(-getgenv().RadiumSettings.AimAssist.ShakeValue, getgenv().RadiumSettings.AimAssist.ShakeValue),
                math.random(-getgenv().RadiumSettings.AimAssist.ShakeValue, getgenv().RadiumSettings.AimAssist.ShakeValue),
                math.random(-getgenv().RadiumSettings.AimAssist.ShakeValue, getgenv().RadiumSettingsNS.AimAssist.ShakeValue)
            ) * 0.1)
            Cam.CFrame = Cam.CFrame:Lerp(Main, getgenv().RadiumSettings.AimAssist.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
        else
            local Main = CFrame.new(Cam.CFrame.p,Plr.Character[getgenv().RadiumSettings.AimAssist.Part].Position + Plr.Character[getgenv().RadiumSettings.AimAssist.Part].Velocity * getgenv().RadiumSettings.AimAssist.Prediction)
            Cam.CFrame = Cam.CFrame:Lerp(Main, getgenv().RadiumSettings.AimAssist.Smoothness, Enum.EasingStyle.Elastic, Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
        end
    end
end)


task.spawn(function()
    while task.wait() do
        if getgenv().RadiumSettings.AimAssist.Enabled and Plr ~= nil and (Plr.Character) then
            getgenv().RadiumSettings.AimAssist.Part = tostring(GetNearestPartToCursorOnCharacter(Plr.Character))
        end
    end
end)


